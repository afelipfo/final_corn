# =========================================================================
# Archivo de Configuración de Ejemplo - Corn Diseases Detection
# =========================================================================
# Copia este archivo a .env y ajusta los valores según tus necesidades:
#   cp src/core/.env_example src/core/.env
# =========================================================================

# =========================================================================
# CONFIGURACIÓN DE DATOS E IMÁGENES
# =========================================================================

# Tamaño de las imágenes (ancho, alto) - debe ser una tupla
# Valores comunes: (224, 224), (299, 299), (640, 640)
IMAGE_SIZE=(224, 224)

# Número de clases a clasificar
NUM_CLASSES=4

# Nombres de las clases - debe ser una lista de Python
CLASS_NAMES=['Blight', 'Common_Rust', 'Gray_Leaf_Spot', 'Healthy']

# Ratios de división (train, val, test) - debe sumar 1.0
SPLIT_RATIOS=(0.7, 0.15, 0.15)

# Umbral de similitud para detección de imágenes duplicadas (de-augmentación)
# Rango: 0.0 a 1.0 (valores más altos = más estricto)
IM_SIM_THRESHOLD=0.95

# Máximo número de imágenes a agregar al balancear clases minoritarias
MAX_ADDED_BALANCE=50

# Tipos de datasets a considerar
# Opciones: ["no-augmentation", "augmented"]
DATASETS_CONSIDERATION=["no-augmentation", "augmented"]

# Subdirectorios para datos raw (relativo a project root)
DATA_RAW_SUBDIRS=["data", "raw"]

# =========================================================================
# CONFIGURACIÓN DEL MODELO DE EMBEDDING (DE-AUGMENTACIÓN)
# =========================================================================

# Modelo preentrenado para generar embeddings
# Opciones: ResNet50, VGG16, MobileNetV2
EMBEDDING_MODEL=ResNet50

# Pesos preentrenados
# Opciones: imagenet, None
EMBEDDING_WEIGHTS=imagenet

# Incluir capa de clasificación superior
EMBEDDING_INCLUDE_TOP=False

# Tipo de pooling
# Opciones: avg, max, None
EMBEDDING_POOLING=avg

# =========================================================================
# CONFIGURACIÓN DE ENTRENAMIENTO
# =========================================================================

# Tamaño del batch para entrenamiento
BATCH_SIZE=32

# Número máximo de épocas de entrenamiento
MAX_EPOCHS=20

# Número máximo de trials para Keras Tuner
MAX_TRIALS=10

# Épocas por trial en Keras Tuner
TUNER_EPOCHS=10

# Factor de reducción para el algoritmo Hyperband
# Debe ser >= 2
FACTOR=3

# Estrategia de balanceo de clases
# Opciones: oversample, downsample, none
BALANCE_STRATEGY=oversample

# Arquitectura base del modelo (backbone)
# Opciones: VGG16, ResNet50, YOLO
BACKBONE=VGG16

# =========================================================================
# CONFIGURACIÓN DEL PROYECTO
# =========================================================================

# Nombre del proyecto
PROJECT_NAME=corn-diseases-detection

# Versión del proyecto
VERSION=0.1.0

# Nivel de logging
# Opciones: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Guardar logs en archivo
LOG_TO_FILE=False

# Nombre del experimento en MLflow
MLFLOW_EXPERIMENT_NAME=image_classification_experiment

# Semilla para reproducibilidad
RANDOM_SEED=42

# =========================================================================
# NOTAS IMPORTANTES
# =========================================================================
#
# 1. FORMATO DE VALORES:
#    - Tuplas: (valor1, valor2)
#    - Listas: ['valor1', 'valor2']
#    - Strings: valor o "valor"
#    - Números: 42
#    - Booleanos: True o False
#
# 2. NO usar comillas para números o booleanos
#
# 3. Las tuplas y listas deben usar sintaxis de Python válida
#
# 4. Los valores por defecto están configurados para funcionar inmediatamente
#
# 5. Para más información, consulta la documentación en README.md
#
# =========================================================================


